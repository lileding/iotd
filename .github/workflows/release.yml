name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: iotd-linux-x86_64

          # Linux x86_64 musl (static linking)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: iotd-linux-x86_64-musl

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: iotd-linux-aarch64

          # Linux ARM64 musl
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: iotd-linux-aarch64-musl

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: iotd-macos-x86_64

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: iotd-macos-aarch64

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: iotd-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install cross-compilation tools for Linux targets
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools
            # For aarch64-musl, we'll use cross instead
            cargo install cross --git https://github.com/cross-rs/cross
          fi

      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]] && [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Use cross for aarch64-musl
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Prepare binary
        shell: bash
        run: |
          # Create a directory for the release
          mkdir -p release
          
          # Copy the binary
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/iotd.exe release/${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/iotd release/${{ matrix.name }}
            # Make it executable
            chmod +x release/${{ matrix.name }}
          fi
          
          # Create a tar.gz archive (except for Windows)
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            cd release
            tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
            cd ..
          else
            # For Windows, create a zip file
            cd release
            7z a -tzip ${{ matrix.name }}.zip ${{ matrix.name }}
            cd ..
          fi

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: release/${{ matrix.name }}

  update-release:
    name: Update Release with Checksums
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          # Generate SHA256 checksums for all binaries
          find . -type f -name "iotd-*" -exec sha256sum {} \; | sed 's|./||' > ../checksums.txt
          cd ..
          echo "SHA256 Checksums:" >> checksums.txt
          echo "" >> checksums.txt
          cat checksums.txt

      - name: Upload Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain